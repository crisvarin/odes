// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_loglik
/* compute the *negative* conditional log-likelihood */ List compute_loglik(NumericVector eta, NumericVector y, double alpha);
RcppExport SEXP _odes_compute_loglik(SEXP etaSEXP, SEXP ySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_loglik(eta, y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// compute_scores
/* compute the *individual* negative scores */ NumericMatrix compute_scores(NumericVector eta, NumericMatrix x, NumericVector y, double alpha);
RcppExport SEXP _odes_compute_scores(SEXP etaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_scores(eta, x, y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// simulate_odes
/* simulate observation-driven exponential smoothing */ NumericVector simulate_odes(NumericVector eta, double alpha);
RcppExport SEXP _odes_simulate_odes(SEXP etaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_odes(eta, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_odes_compute_loglik", (DL_FUNC) &_odes_compute_loglik, 3},
    {"_odes_compute_scores", (DL_FUNC) &_odes_compute_scores, 4},
    {"_odes_simulate_odes", (DL_FUNC) &_odes_simulate_odes, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_odes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
